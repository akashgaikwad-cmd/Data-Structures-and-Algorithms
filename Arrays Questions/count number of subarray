class Solution:
    # @param A : list of integers
    # @param B : integer
    # @return an integer
    def solve(self, A, B):
        n = len(A)
        ans = 0 # Initialize answer to be returned 
  
        # Create a prefix xor-sum array such that xorArr[i] has value equal to XOR of all elements in A[0 ..... i] 
        xorArr =[0 for _ in range(n)] 
      
        # Create map that stores number of prefix array elements corresponding to a XOR value 
        mp = dict() 
      
        # Initialize first element of prefix array 
        xorArr[0] = A[0] 
      
        # Computing the prefix array. 
        for i in range(1, n): 
            xorArr[i] = xorArr[i - 1] ^ A[i] 
      
        # Calculate the answer 
        for i in range(n): 
              
            # Find XOR of current prefix with m. 
            tmp = B ^ xorArr[i] 
      
            # If above XOR exists in map, then there is another previous prefix with same XOR, i.e., there is a subarray ending at i with XOR equal to B. 
            if tmp in mp.keys(): 
                ans = ans + (mp[tmp]) 
      
            # If this subarray has XOR equal to m itself. 
            if (xorArr[i] == B): 
                ans += 1
      
            # Add the XOR of this subarray to the map 
            mp[xorArr[i]] = mp.get(xorArr[i], 0) + 1
      
        # Return total count of subarrays having XOR of elements as given value m 
        return ans
